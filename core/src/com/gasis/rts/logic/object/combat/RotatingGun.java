package com.gasis.rts.logic.object.combat;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.gasis.rts.logic.Renderable;
import com.gasis.rts.logic.Updatable;
import com.gasis.rts.logic.object.Rotatable;
import com.gasis.rts.math.Point;
import com.gasis.rts.resources.Resources;
import com.gasis.rts.utils.Constants;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.gasis.rts.logic.object.unit.Unit.*;

/**
 * Represents any gun that rotates around a fixed point (tank gun, rocket launcher...)
 */
public class RotatingGun implements Updatable, Renderable, Rotatable {

    // texture atlas that holds the textures of the gun
    protected String atlas;

    // textures of the rotating gun
    // texture indexes must match the values of facing directions
    // defined in the Unit class
    protected List<String> textures;

    // coordinates of the point which the gun rotates around
    protected float x;
    protected float y;

    // the offset of the gun (used when applying recoil force)
    protected float xOffset;
    protected float yOffset;

    // speed at which the offset grows (per second) (used when applying recoil force)
    protected float xOffsetSpeed;
    protected float yOffsetSpeed;

    // gun's dimensions
    protected float width;
    protected float height;

    // the resistance of the recoil force between 0 (doesn't resist at all)
    // and 1 (fully resists)
    protected float recoilResistance;

    // the direction which the gun is pointed to
    // must have one of the facing direction values defined in the Unit class
    protected byte facingDirection = EAST;

    // the direction the gun is currently rotating to
    protected byte rotatingToDirection;

    // how much time has elapsed since the last rotation
    protected float timeSinceLastRotation;

    // the speed at which the gun rotates (expressed by rotations per seconds)
    protected float rotationSpeed;

    // sources the gun fires from
    protected Map<String, FireSourceWithFirePoints> fireSources = new HashMap<String, FireSourceWithFirePoints>();

    /**
     * Creates a new fire source for the gun
     *
     * @param name name used to identify the source
     * @param gunCount how many guns are firing
     * @param type type of the projectile
     * @param scale scale of the projectile
     * @param flightTime projectile's flight time in seconds
     * @param firePoints from where the source fires in each facing direction
     * @param recoil strength of the recoil generated by the fire source
     * @param listener listener that listens for the reach of the target
     */
    @SuppressWarnings("Duplicates")
    public void createFireSource(String name, byte gunCount, byte type, byte scale, float flightTime, List<Point> firePoints, float recoil, TargetReachListener listener) {
        FireSource source = new FireSource();
        source.setFireType(type);
        source.setProjectileScale(scale);
        source.setGunCount(gunCount);
        source.addTargetReachListener(listener);
        source.setFlightTime(flightTime);

        FireSourceWithFirePoints combinedSource = new FireSourceWithFirePoints(firePoints, source, recoil);

        fireSources.put(name, combinedSource);
    }

    /**
     * Gets the resistance of the recoil force
     * @return
     */
    public float getRecoilResistance() {
        return recoilResistance;
    }

    /**
     * Sets the resistance of the recoil force
     *
     * @param recoilResistance new resistance between 0 and 1
     */
    public void setRecoilResistance(float recoilResistance) {
        this.recoilResistance = recoilResistance;
    }

    /**
     * Gets the rotation speed of the gun
     * @return
     */
    public float getRotationSpeed() {
        return rotationSpeed;
    }

    /**
     * Sets the rotation speed of the gun
     *
     * @param rotationSpeed the speed at which the gun rotates (in rotations per second)
     */
    public void setRotationSpeed(float rotationSpeed) {
        this.rotationSpeed = rotationSpeed;
    }

    /**
     * Gets the facing direction of the gun
     * @return
     */
    public byte getFacingDirection() {
        return facingDirection;
    }

    /**
     * Sets the facing direction of the gun
     *
     * @param facingDirection
     */
    public void setFacingDirection(byte facingDirection) {
        this.facingDirection = facingDirection;
    }

    /**
     * Gets the width of the gun
     * @return
     */
    public float getWidth() {
        return width;
    }

    /**
     * Gets the height of the gun
     * @return
     */
    public float getHeight() {
        return height;
    }

    /**
     * Sets the width of the gun
     *
     * @param width new width
     */
    public void setWidth(float width) {
        this.width = width;
    }

    /**
     * Sets the height of the gun
     *
     * @param height new height
     */
    public void setHeight(float height) {
        this.height = height;
    }

    /**
     * Sets the x coordinate of the rotation point
     *
     * @param x new x coordinate
     */
    public void setRotationPointX(float x) {
        this.x = x;
    }

    /**
     * Sets the y coordinate of the rotation point
     *
     * @param y new y coordinate
     */
    public void setRotationPointY(float y) {
        this.y = y;
    }

    /**
     * Gets the x coordinate of the rotation point
     * @return
     */
    public float getRotationPointX() {
        return x;
    }

    /**
     * Gets the y coordinate of the rotation point
     * @return
     */
    public float getRotationPointY() {
        return y;
    }

    /**
     * Fires at the specified target coordinates
     *
     * @param sourceName name of the fire source from which the shot will be fired
     * @param targetX x coordinate of the target
     * @param targetY y coordinate of the target
     */
    @SuppressWarnings("Duplicates")
    public void fire(String sourceName, float targetX, float targetY) {
        FireSourceWithFirePoints source = fireSources.get(sourceName);

        source.fireSource.setX(source.firePoints.get(facingDirection).x);
        source.fireSource.setY(source.firePoints.get(facingDirection).y);

        source.fireSource.fire(facingDirection, targetX, targetY);

        applyRecoil(source.recoil);
    }

    /**
     * Applies recoil force to the gun
     *
     * @param recoil strength of the recoil
     */
    protected void applyRecoil(float recoil) {
        if (recoil <= 0) {
            return;
        }

        switch (facingDirection) {
            case NORTH:
                xOffsetSpeed = 0;
                yOffsetSpeed = -recoil;
                break;
            case NORTH_EAST:
                xOffsetSpeed = -recoil;
                yOffsetSpeed = -recoil;
                break;
            case EAST:
                xOffsetSpeed = -recoil;
                yOffsetSpeed = 0;
                break;
            case SOUTH_EAST:
                xOffsetSpeed = -recoil;
                yOffsetSpeed = recoil;
                break;
            case SOUTH:
                xOffsetSpeed = 0;
                yOffsetSpeed = recoil;
                break;
            case SOUTH_WEST:
                xOffsetSpeed = recoil;
                yOffsetSpeed = recoil;
                break;
            case WEST:
                xOffsetSpeed = recoil;
                yOffsetSpeed = 0;
                break;
            case NORTH_WEST:
                xOffsetSpeed = recoil;
                yOffsetSpeed = -recoil;
                break;
            default:
                xOffsetSpeed = 0;
                yOffsetSpeed = 0;
                break;
        }
    }

    /**
     * Orders the gun to rotate to face the given direction
     *
     * @param direction the direction the gun should face
     */
    @Override
    public void rotateToDirection(byte direction) {
        this.rotatingToDirection = direction;
        timeSinceLastRotation = 0;
    }

    /**
     * Updates the state of the gun
     *
     * @param delta time elapsed since the last update
     */
    @Override
    public void update(float delta) {
        // update fire sources
        for (FireSourceWithFirePoints source: fireSources.values()) {
            source.fireSource.update(delta);
        }

        updateFacingDirection(delta);
        updateOffset(delta);
    }

    /**
     * Updates the offset of the gun
     *
     * @param delta time elapsed since the last update
     */
    protected void updateOffset(float delta) {
        xOffset += xOffsetSpeed * delta;
        yOffset += yOffsetSpeed * delta;

        // apply recoil resistance
        xOffsetSpeed *= (1 - recoilResistance * delta);
        yOffsetSpeed *= (1 - recoilResistance * delta);

        // make the offset approach 0
        xOffset *= (1 - recoilResistance * delta);
        yOffset *= (1 - recoilResistance * delta);
    }

    /**
     * Updates the facing direction of the gun
     *
     * @param delta time elapsed since the last update
     */
    @SuppressWarnings("Duplicates")
    protected void updateFacingDirection(float delta) {
        // update gun's rotation if it is currently rotating
        if (rotatingToDirection != NONE && timeSinceLastRotation >= 1f / rotationSpeed) {
            byte directionDiff = (byte) Math.abs(facingDirection - rotatingToDirection);

            byte directionIncrement = (byte) (facingDirection - rotatingToDirection < 0 ? 1 : -1);

            if (directionDiff > 4) {
                directionIncrement *= -1;
            }

            facingDirection += directionIncrement;

            if (facingDirection < 0) {
                facingDirection = 7;
            } else if (facingDirection > 7) {
                facingDirection = 0;
            }

            timeSinceLastRotation = 0;

            if (facingDirection == rotatingToDirection) {
                rotatingToDirection = NONE;

                // make the gun be able to rotate again immediately
                timeSinceLastRotation = 1f / rotationSpeed;
            }
        } else {
            timeSinceLastRotation += delta;
        }
    }

    /**
     * Renders the gun to the screen
     *
     * @param batch sprite batch to draw to
     * @param resources game assets
     */
    @Override
    public void render(SpriteBatch batch, Resources resources) {
        batch.draw(
                resources.atlas(Constants.FOLDER_ATLASES + atlas).findRegion(textures.get(facingDirection)),
                x + xOffset - width / 2f,
                y + yOffset - height / 2f,
                width,
                height
        );

        // render fire sources
        for (FireSourceWithFirePoints source: fireSources.values()) {
            source.fireSource.render(batch, resources);
        }
    }

    /**
     * Holds a fire source and the coordinates it shoots from
     */
    protected class FireSourceWithFirePoints {

        // from where the shots are fired for each facing direction
        // point indexes must match facing directions defined in Unit class
        protected List<Point> firePoints;

        // the firing source
        protected FireSource fireSource;

        // the strength of the recoil generated when the source fires
        protected float recoil;

        protected FireSourceWithFirePoints(List<Point> firePoints, FireSource fireSource, float recoil) {
            this.firePoints = firePoints;
            this.fireSource = fireSource;
            this.recoil = recoil;
        }
    }
}
